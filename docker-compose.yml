services:

  reverse-proxy:
    build:
      context: ./
      dockerfile: config/docker/traefic.Dockerfile
      args:
        VERSION: ${TRAEFIC_VERSION}
    container_name: ${TRAEFIC_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - ${TRAEFIC_PORT_HTTP}:80
      - ${TRAEFIC_PORT_WEB}:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--accesslog"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--providers.file.directory=/configuration/"
      - "--providers.file.watch=true"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.reverse-proxy.entrypoints=web"
      - "traefik.http.routers.reverse-proxy.rule=Host(`traefic.localhost`)"
      - "traefik.http.services.reverse-proxy.loadbalancer.server.port=8080"
    networks:
      - project

  nginx:
    build:
      context: ./
      dockerfile: config/docker/nginx.Dockerfile
      args:
        VERSION: ${NGINX_VERSION}
    container_name: ${NGINX_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
#      - ${NGINX_PORT_HTTP}:80
      - ${NGINX_PORT_HTTPS}:443
      - ${NGINX_PORT_JS}:3000
    volumes:
      - ./config/nginx/sites-available:/etc/nginx/sites-available
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${PHP_WEB_PATH_PROJECT}:/var/www/php
      - ${NODE_PATH_PROJECT}:/var/www/js
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/listen
      #      - ./certbot:/var/www/certbot
      #      - ./certbot/conf:/etc/nginx/listen
      - ./scripts/nginx:/var/scripts
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.entrypoints=web"
      - "traefik.http.routers.nginx.rule=Host(`dev.localhost`)"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
    networks:
      - project


  php:
    build:
      context: ./
      dockerfile: config/docker/php.Dockerfile
      args:
        VERSION: ${PHP_VERSION}
    container_name: ${PHP_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - ${PHP_PORT}:9000
#      - ${PHP_SUPERVISOR_PORT}:9001
    volumes:
      - ${PHP_WEB_PATH_PROJECT}:/var/www/php
      - ./config/supervisor:/var/config/supervisor
      - ./config/supervisor/conf.d:/etc/supervisor/conf.d
      - ./logs/supervisor:/var/log/supervisor
      - ./scripts/php:/var/scripts
      - ./config/php:/var/config/php
      - ./proto:/var/proto
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.php.entrypoints=web"
      - "traefik.http.routers.php.rule=Host(`supervisor.localhost`)"
      - "traefik.http.services.php.loadbalancer.server.port=9001"
    networks:
      - project

  postgres:
    build:
      context: ./
      dockerfile: config/docker/postgres.Dockerfile
      args:
        VERSION: ${POSTGRES_VERSION}
    container_name: ${POSTGRES_CONTAINER}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - project

  rabbitmq:
    build:
      context: ./
      dockerfile: config/docker/rabbitmq.Dockerfile
      args:
        VERSION: ${RMQ_VERSION}
    container_name: ${RMQ_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      RABBITMQ_DEFAULT_USER: ${RMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RMQ_PASS}
      RABBITMQ_NODENAME: ${RMQ_NODE_NAME}
      #RABBITMQ_ERLANG_COOKIE: ${RMQ_COOKIE}
      RABBITMQ_LOGS: /var/log/rabbitmq/log/rabbitmq.log
    ports:
      - ${RMQ_PORT_CONNECT}:5672
    volumes:
      - ./logs/rabbitmq:/var/log/rabbitmq
      - ./data/rabbitmq:/var/lib/rabbitmq
    #- ./config/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.entrypoints=web"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbit.localhost`)"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    networks:
      - project

  buggregator:
    build:
      context: ./
      dockerfile: config/docker/buggregator.Dockerfile
      args:
        VERSION: ${BUGGREGATOR_VERSION}
    container_name: ${BUGGREGATOR_CONTAINER}
    restart: unless-stopped
    environment:
      PERSISTENCE_DRIVER: db
      DB_DRIVER: pgsql
      DB_DATABASE: ${BUGGREGATOR_DB_NAME}
      DB_HOST: postgres
      DB_PORT: POSTGRES_PORT
      DB_USERNAME: ${BUGGREGATOR_DB_USER}
      DB_PASSWORD: ${BUGGREGATOR_DB_PASS}
    ports:
      - ${BUGGREGATOR_PORT_SMTP}:1025
      - ${BUGGREGATOR_PORT_DUMPER}:9912
      - ${BUGGREGATOR_PORT_LOGGING}:9913
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.buggregator.entrypoints=web"
      - "traefik.http.routers.buggregator.rule=Host(`bug.localhost`)"
      - "traefik.http.services.buggregator.loadbalancer.server.port=8000"
    networks:
      - project

  golang:
    build:
      context: ./
      dockerfile: config/docker/go.Dockerfile
      args:
        VERSION: ${GOLANG_VERSION}
    container_name: ${GOLANG_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    tty: true
    ports:
      - ${GOLANG_PORT_API}:5462
      - ${GOLANG_PORT_GRPC}:5463
      - ${GOLANG_PORT_METRICS}:5464
    volumes:
      - ${GOLANG_PATH_PROJECT}:/var/www
      - ./logs/golang:/var/log
      - ./scripts/go:/var/scripts
      - ./proto:/var/proto
    networks:
      - project

  redis:
    build:
      context: ./
      dockerfile: config/docker/redis.Dockerfile
      args:
        VERSION: ${REDIS_VERSION}
    container_name: ${REDIS_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./config/redis:/usr/local/etc/redis
      - ./logs/redis:/var/log
      - ./data/redis:/data
    networks:
      - project

  node:
    build:
      context: ./
      dockerfile: config/docker/node.Dockerfile
      args:
        VERSION: ${NODE_VERSION}
    container_name: ${NODE_CONTAINER}
    tty: true
    environment:
      TZ: ${TZ}
    ports:
      - ${NODE_PORT_PREVIEW}:4173
    restart: unless-stopped
    volumes:
      - ${NODE_PATH_PROJECT}:/var/www
      - ./scripts/node:/var/scripts
      - ./logs/node:/root/.npm/_logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node.entrypoints=web"
      - "traefik.http.routers.node.rule=Host(`web.localhost`)"
      - "traefik.http.services.node.loadbalancer.server.port=8080"
    networks:
      - project

  mongodb:
    build:
      context: ./
      dockerfile: config/docker/mongodb.Dockerfile
      args:
        VERSION: ${MONGODB_VERSION}
    container_name: ${MONGODB_CONTAINER}
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_NAME}
    volumes:
      - ./data/mongodb:/data/db
      - ./scripts/mongodb:/var/scripts
      - ./logs/mongodb:/var/log/mongodb
    ports:
      - ${MONGODB_PORT}:27017
    networks:
      - project

  prometheus:
    build:
      context: ./
      dockerfile: config/docker/prometheus.Dockerfile
      args:
        VERSION: ${PROMETHEUS_VERSION}
    container_name: ${PROMETHEUS_CONTAINER}
    restart: unless-stopped
    ports:
      - ${PROMETHEUS_PORT}:9090
    volumes:
      - ./config/prometheus:/etc/prometheus
    networks:
      - project

  grafana:
    build:
      context: ./
      dockerfile: config/docker/grafana.Dockerfile
      args:
        VERSION: ${GRAFANA_VERSION}
    container_name: ${GRAFANA_CONTAINER}
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./data/grafana:/var/lib/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      - project

  #  logstash:
  #    build:
  #      context: ./
  #      dockerfile: config/docker/logstash.Dockerfile
  #      args:
  #        VERSION: ${VERSION_LOGSTASH}
  #    container_name: ${CONTAINER_LOGSTASH}
  #    restart: unless-stopped
  #    environment:
  #      discovery.seed_hosts: logstash
  #      LS_JAVA_OPTS: -Xmx1g -Xms1g
  #      LOGSTASH_INTERNAL_PASSWORD: 'password'
  #    ports:
  #      - "5001:5000/tcp"
  #      - "5001:5000/udp"
  #      - "5044:5044"
  #      - "9600:9600"
  #    volumes:
  #      - ./config/logstash/:/var/config/logstash
  #      - ./scripts/logstash:/var/scripts
  #      - ./logs/logstash:/usr/share/logstash/logs

  #  kibana:
  #    build:
  #      context: ./
  #      dockerfile: config/docker/kibana.Dockerfile
  #      args:
  #        VERSION: ${VERSION_KIBANA}
  #    container_name: ${CONTAINER_KIBANA}
  #    restart: unless-stopped
  #    ports:
  #      - ${KIBANA_PORT}:5601
  #    volumes:
  #      - ./data/kibana:/usr/share/kibana/data
  #    environment:
  #      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOST}
  #      KIBANA_SYSTEM_PASSWORD: 'password'
  #    networks:
  #     - project



  #  elastic:
  #    build:
  #      context: ./
  #      dockerfile: config/docker/elastic.Dockerfile
  #      args:
  #        VERSION: ${VERSION_ELASTICSEARCH}
  #    environment:
  #      discovery.type: single-node
  #      xpack.security.enabled: false
  #      xpack.license.self_generated.type: basic
  ##      xpack.security.enrollment.enabled: true
  #      LS_JAVA_OPTS: -Xmx1g -Xms1g
  #      ELASTIC_USERNAME: elastic
  #      ELASTIC_PASSWORD: password
  #    container_name: ${CONTAINER_ELASTICSEARCH}
  #    restart: unless-stopped
  #    ports:
  #      - ${ELASTICSEARCH_PORT}:9200
  #      - "9300:9300"
  #    volumes:
  #      - ./data/elastic/:/usr/share/elasticsearch/data
  #      - ./logs/elastic/:/usr/share/elasticsearch/logs
  #    networks:
  #      - project
  #    logging:
  #      driver: none

  #  certbot:
  #    build:
  #      context: ./
  #      dockerfile: config/docker/certbot.Dockerfile
  #      args:
  #        VERSION: ${VERSION_CERTBOT}
  #    container_name: ${CONTAINER_CERTBOT}
  #    restart: unless-stopped
  #    volumes:
  #      - ./certbot/:/var/www/certbot/:rw
  #      - ./certbot/conf/:/etc/letsencrypt/:rw
  #      - ./logs/certbot:/var/log/letsencrypt
  #    networks:
  #      - project

  chat:
    build:
      context: ./
      dockerfile: config/docker/chat.Dockerfile
      args:
        VERSION: ${CHAT_PHP_VERSION}
    container_name: ${CHAT_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - "8010:8010"
      - "6001:6001"
      - "10000:10000"
      - "10001:10001"
    volumes:
      - ${CHAT_PATH}:/var/www
      - ./scripts/php:/var/scripts
      - ./config/php:/var/config/php
    networks:
      - project

  centrifugo:
    build:
      context: ./
      dockerfile: config/docker/centrifugo.Dockerfile
      args:
        VERSION: ${CENTRIFUGO_VERSION}
    volumes:
      - ./config/centrifugo:/centrifugo
      - ./scripts/centrifugo:/var/scripts
    container_name: ${CENTRIFUGO_CONTAINER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - ${CENTRIFUGO_PORT}:8000
    networks:
      - project

  swagger:
    build:
      context: ./
      dockerfile: 'config/docker/swagger.Dockerfile'
      args:
        VERSION: ${SWAGGER_VERSION}
    container_name: ${SWAGGER_CONTAINER}
    restart: unless-stopped
    environment:
      SWAGGER_JSON: /swagger/swagger.json
    volumes:
      - ./swagger:/swagger
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.swagger.entrypoints=web"
      - "traefik.http.routers.swagger.rule=Host(`docs.localhost`)"
      - "traefik.http.services.swagger.loadbalancer.server.port=8080"
    networks:
      - project

  #  collector:
  #    build:
  #      context: ./
  #      dockerfile: 'config/docker/otel.Dockerfile'
  #    container_name: ${CONTAINER_COLLECTOR}
  #    restart: unless-stopped
  #    command: [ "--config=/etc/collector-config.yml" ]
  #    volumes:
  #      - ./config/otel/collector-config.yml:/etc/collector-config.yml
  #    networks:
  #      - project

  temporal:
    build:
      context: ./
      dockerfile: 'config/docker/temporal.Dockerfile'
      args:
        VERSION: ${TEMPORAL_VERSION}
    container_name: ${TEMPORAL_CONTAINER}
    environment:
      DB: postgres12
      DB_PORT: ${TEMPORAL_DB_PORT}
      POSTGRES_USER: ${TEMPORAL_DB_USER}
      POSTGRES_PWD: ${TEMPORAL_DB_PASS}
      POSTGRES_SEEDS: ${TEMPORAL_DB_SEEDS}
      DYNAMIC_CONFIG_FILE_PATH: config/dynamicconfig/development-sql.yml
    volumes:
      - ./config/temporal:/etc/temporal/config/dynamicconfig
    restart: unless-stopped
    networks:
      - project

  temporal-ui:
    build:
      context: ./
      dockerfile: 'config/docker/temporal-ui.Dockerfile'
      args:
        VERSION: ${TEMPORAL_UI_VERSION}
    container_name: ${TEMPORAL_UI_CONTAINER}
    environment:
      TEMPORAL_ADDRESS: ${TEMPORAL_UI_ADDRESS}
      TEMPORAL_CORS_ORIGINS: ${TEMPORAL_UI_CORS_ORIGIN}
    restart: unless-stopped
    networks:
      - project
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.temporal.entrypoints=web"
      - "traefik.http.routers.temporal.rule=Host(`temporal.localhost`)"
      - "traefik.http.services.temporal.loadbalancer.server.port=8080"

  minio:
    build:
      context: ./
      dockerfile: 'config/docker/minio.Dockerfile'
      args:
        VERSION: ${MINIO_VERSION}
    container_name: ${MINIO_CONTAINER}
    command: server --console-address ":9001" /data/
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    ports:
#      - ${MINIO_LIVE_PORT}:9000
      - ${MINIO_PORT}:9001
    volumes:
      - ./data/minio:/data
    restart: unless-stopped
    networks:
      - project
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.entrypoints=web"
      - "traefik.http.routers.minio.rule=Host(`minio.localhost`)"
      - "traefik.http.services.minio.loadbalancer.server.port=9000"

networks:
  project:
    ipam:
      driver: default
      config:
        - subnet: 172.0.13.0/24