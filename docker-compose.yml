version: '3.8'

services:

  nginx:
    build:
      context: ./
      dockerfile: config/docker/nginx.Dockerfile
      args:
        VERSION: ${VERSION_NGINX}
    container_name: ${CONTAINER_SERVER}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - ${NGINX_PHP_PORT_HTTP}:80
      - ${NGINX_PHP_PORT_HTTPS}:443
      - ${NGINX_JS_PORT}:3000
    volumes:
      - ./config/nginx/sites-available:/etc/nginx/sites-available
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${PATH_PHP_PROJECT}:/var/www/php
      - ${PATH_JS_PROJECT}:/var/www/js
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/listen
#      - ./certbot:/var/www/certbot
#      - ./certbot/conf:/etc/nginx/listen
      - ./scripts/nginx:/var/scripts
    networks:
      - project

  php:
    build:
      context: ./
      dockerfile: config/docker/php.Dockerfile
      args:
        VERSION: ${VERSION_PHP}
    container_name: ${CONTAINER_PHP}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - ${PHP_PORT}:9000
      - ${SUPERVISOR_PORT}:9001
    volumes:
      - ${PATH_PHP_PROJECT}:/var/www
      - ./config/supervisor:/var/config/supervisor
      - ./config/supervisor/conf.d:/etc/supervisor/conf.d
      - ./logs/supervisor:/var/log/supervisor
      - ./scripts/php:/var/scripts
      - ./config/php:/var/config/php
      - ./proto:/var/proto
    networks:
      - project

  postgres:
    build:
      context: ./
      dockerfile: config/docker/postgres.Dockerfile
      args:
        VERSION: ${VERSION_POSTGRES}
    container_name: ${CONTAINER_POSTGRES}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASS}
      POSTGRES_DB: ${POSTGRES_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - project

  rabbitmq:
    build:
      context: ./
      dockerfile: config/docker/rabbitmq.Dockerfile
      args:
        VERSION: ${VERSION_RABBITMQ}
    container_name: ${CONTAINER_RMQ}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      RABBITMQ_DEFAULT_USER: ${RMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RMQ_PASS}
      RABBITMQ_NODENAME: ${RMQ_NODE_NAME}
      #RABBITMQ_ERLANG_COOKIE: ${RMQ_COOKIE}
      RABBITMQ_LOGS: /var/log/rabbitmq/log/rabbitmq.log
    ports:
      - ${RMQ_PORT_CONNECT}:5672
      - ${RMQ_PORT_URI}:15672
    volumes:
      - ./logs/rabbitmq:/var/log/rabbitmq
      - ./data/rabbitmq:/var/lib/rabbitmq
    #- ./config/rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
    networks:
      - project

  mail:
    build:
      context: ./
      dockerfile: config/docker/mail.Dockerfile
    container_name: ${CONTAINER_MAIL}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - ${MAIL_PORT_SMTP}:1025
      - ${MAIL_PORT_HTTP}:8025
    networks:
      - project

  golang:
    build:
      context: ./
      dockerfile: config/docker/go.Dockerfile
      args:
        VERSION: ${VERSION_GOLANG}
    container_name: ${CONTAINER_GOLANG}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    tty: true
    ports:
      - ${GOLANG_PORT}:5462
    volumes:
      - ${PATH_GOLANG_PROJECT}:/var/www
      - ./logs/golang:/var/log
      - ./scripts/go:/var/scripts
      - ./proto:/var/proto
    networks:
      - project

  redis:
    build:
      context: ./
      dockerfile: config/docker/redis.Dockerfile
      args:
        VERSION: ${VERSION_REDIS}
    container_name: ${CONTAINER_REDIS}
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ./config/redis:/usr/local/etc/redis
      - ./logs/redis:/var/log
      - ./data/redis:/data
    networks:
      - project

  node:
    build:
      context: ./
      dockerfile: config/docker/node.Dockerfile
      args:
        VERSION: ${VERSION_NODE}
        FRAMEWORK: ${GLOBAL_JS_FRAMEWORK_COMMAND}
    container_name: ${CONTAINER_NODE}
    tty: true
    environment:
      TZ: ${TZ}
    ports:
      - ${NODE_PORT_DEV}:8080
    restart: unless-stopped
    volumes:
      - ${PATH_JS_PROJECT}:/var/www
      - ./scripts/node:/var/scripts
      - ./logs/node:/root/.npm/_logs
    networks:
      - project

  mongodb:
    build:
      context: ./
      dockerfile: config/docker/mongodb.Dockerfile
      args:
        VERSION: ${VERSION_MONGODB}
    container_name: ${CONTAINER_MONGODB}
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_NAME}
    volumes:
      - ./data/mongodb:/data/db
      - ./scripts/mongodb:/var/scripts
      - ./logs/mongodb:/var/log/mongodb
    ports:
      - ${MONGODB_PORT}:27017
    networks:
      - project

  prometheus:
    build:
      context: ./
      dockerfile: config/docker/prometheus.Dockerfile
      args:
        VERSION: ${VERSION_PROMETHEUS}
    container_name: ${CONTAINER_PROMETHEUS}
    restart: unless-stopped
    ports:
      - ${PROMETHEUS_PORT}:9090
    environment:
      SERVER_NAME: ${KIBANA_SERVER_NAME}
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOST}
#    volumes:
#      - ./config/prometheus:/etc/prometheus
    networks:
      - project

  logstash:
    build:
      context: ./
      dockerfile: config/docker/logstash.Dockerfile
      args:
        VERSION: ${VERSION_LOGSTASH}
    container_name: ${CONTAINER_LOGSTASH}
    restart: unless-stopped
    volumes:
#      - ./config/logstash/:/usr/share/logstash/config
      - ./logs/logstash:/usr/share/logstash/logs

  kibana:
    build:
      context: ./
      dockerfile: config/docker/kibana.Dockerfile
      args:
        VERSION: ${VERSION_KIBANA}
    container_name: ${CONTAINER_KIBANA}
    restart: unless-stopped
    ports:
      - ${KIBANA_PORT}:5601
    volumes:
      - ./data/kibana:/usr/share/kibana/data
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOST}
    networks:
     - project

  grafana:
    build:
      context: ./
      dockerfile: config/docker/grafana.Dockerfile
      args:
        VERSION: ${VERSION_GRAFANA}
    container_name: ${CONTAINER_GRAFANA}
    restart: unless-stopped
    ports:
      - ${GRAFANA_PORT}:3000
    volumes:
      - ./data/grafana:/var/lib/grafana
    networks:
      - project

  elastic:
    build:
      context: ./
      dockerfile: config/docker/elastic.Dockerfile
      args:
        VERSION: ${VERSION_ELASTICSEARCH}
    environment:
      discovery.type: single-node
      xpack.security.enrollment.enabled: true
      ELASTIC_PASSWORD: password
    container_name: ${CONTAINER_ELASTICSEARCH}
    restart: unless-stopped
    ports:
      - ${ELASTICSEARCH_PORT}:9200
    volumes:
      - ./data/elastic/:/usr/share/elasticsearch/data
      - ./logs/elastic/:/usr/share/elasticsearch/logs
    networks:
      - project


#  certbot:
#    build:
#      context: ./
#      dockerfile: config/docker/certbot.Dockerfile
#      args:
#        VERSION: ${VERSION_CERTBOT}
#    container_name: ${CONTAINER_CERTBOT}
#    restart: unless-stopped
#    volumes:
#      - ./certbot/:/var/www/certbot/:rw
#      - ./certbot/conf/:/etc/letsencrypt/:rw
#      - ./logs/certbot:/var/log/letsencrypt
#    networks:
#      - project


networks:
  project:
    driver: bridge